test.single=Test single.
test.three.different=Test three different ({0}, {1}, {2}).
test.two.multi=Test two multi ({0}, {1}, {0}, {0}).
# contracts
skeleton.contracts.asserts.containsKey=Origin: {0} >> ASSERTION VIOLATED: Key is not contained in map. {1}
skeleton.contracts.requires.containsKey=Origin: {0} >> PRECONDITION VIOLATED: Key is not contained in map. {1}
skeleton.contracts.asserts.failed=Origin: {0} >> PRECONDITION VIOLATED: Argument did not match the specified criterion. {1}
skeleton.contracts.requires.failed=Origin: {0} >> PRECONDITION VIOLATED: Argument did not match the specified criterion. {1}
skeleton.contracts.asserts.equalTo=Origin: {0} >> ASSERTION VIOLATED: Objects are not equal. {1}
skeleton.contracts.requires.equalTo=Origin: {0} >> PRECONDITION VIOLATED: Objects are not equal. {1}
skeleton.contracts.requires.isInteger=Origin: {0} >> PRECONDITION VIOLATED: Argument is not an integer. {1}
skeleton.contracts.requires.isLong=Origin: {0} >> PRECONDITION VIOLATED: Argument is not an long. {1}
skeleton.contracts.requires.isNull=Origin: {0} >> PRECONDITION VIOLATED: Argument is not (null). {1}
skeleton.contracts.requires.notEmpty=Origin: {0} >> PRECONDITION VIOLATED: Argument must not be empty. {1}
skeleton.contracts.requires.notNull=Origin: {0} >> PRECONDITION VIOLATED: Argument must not be (null). {1}
skeleton.contracts.asserts.notNull=Origin: {0} >> ASSERTION VIOLATED: Argument must not be (null). {1}
skeleton.contracts.ensures.notNull=Origin: {0} >> POSTCONDITION VIOLATED: Argument must not be (null). {1}
